// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id             String   @id @default(uuid())
  clerkUserId    String   @unique
  email          String   @unique
  name           String?
  imageUrl       String?
  industry       String?
  industryInsight IndustryInsight? @relation(fields:[industry], references:[industry])

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt


  bio            String?
  experience     Int?
  skills         String[]

  assessments    Assessments[]
  resume         Resume[]
  coverletter    CoverLetter[]
}

model IndustryInsight{
  id             String   @id @default(cuid())
  industry       String   @unique
  users          User[]   
  salaryRange    Json
  growthRate     Float
  demandLevel    DemandLevel   //"high" | "medium" | "low"
  TopSkills      String[]
  marketOutlook   MarketOutlook  // "positive" | "neutral" | "negative"
  keyTrends       String[]
  recomendedSkills String[]

  lastUpdated     DateTime  @default(now())
  nextUpdate       DateTime

  @@index([industry])
}

model Assessments{
  id                       String   @id @default(cuid())
  userId                   String
  user                     User     @relation(fields:[userId], references: [id])

  quizScore                 Float
  questions                 Json
  category                 String
  improvementTip           String? 
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt


  @@index([userId])

}

model Resume{
  id             String   @id @default(cuid())
  userId         String   @unique 
  user           User     @relation(fields:[userId], references: [id])
  atsScore       Float
  feedback       String?
  content        String    @db.Text
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  

}

model CoverLetter{
  id             String   @id @default(cuid())
  userId         String   @unique 
  user           User     @relation(fields:[userId], references: [id])
 
  jobDescription String?
  jobTitle       String
  companyName    String
  content        String   
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([userId])


}

enum DemandLevel {
  high
  medium
  low
}

enum MarketOutlook {
  positive
  neutral
  negative
}